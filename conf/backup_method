#!/usr/bin/env bash
# Fail on error
set -Eeuo pipefail

#=========================================================#
#                     GLOBAL VARS                         #
#=========================================================#

# yuno-archive script
declare -r YUNO_ARCHIVE='__INSTALL_DIR__/yuno-archive.sh'

# log file
declare -r LOG='/var/log/__APP__/backup.log'

# Params sent by yunohost backup script
declare -r BACKUP_TMP_DIR="$2"
declare -r BACKUP_NAME="$3"
declare -r LOCAL_REPO="$4"
declare -r BACKUP_SIZE="$5"
declare -r BACKUP_DESCRIPTION="$6"

# Export tmp dir root to use yunohost.backup (/tmp is often too small to create archive file)
# We use this in order to avoid multiple temp folder in yunohost.backup dir if app crashes before cleanup
export YARCH_TMPDIR="/home/yunohost.backup/tmp___APP__"
mkdir -p "$YARCH_TMPDIR"
# cleanup previous temp files (if app creshed)
rm -rf "$YARCH_TMPDIR"/*

# Info file name
declare -r INFO_FILE="${BACKUP_TMP_DIR}/info.json"

# Hook script
declare -r HOOK_FILE="__INSTALL_DIR__/backup_hook"

# App config
IS_DEFAULT_REPO=$(yunohost app setting "__APP__" ynh_repo)

LOCAL_REPOSITORY="/home/yunohost.backup/archives"
if [[ $IS_DEFAULT_REPO == "0" ]]; then
    LOCAL_REPOSITORY=$(yunohost app setting "__APP__" local_repository)
fi
DRIVE_REPOSITORY=$(yunohost app setting "__APP__" drive_repository)
RCLONE_REPOSITORY=$(yunohost app setting "__APP__" rclone_repository)

METHOD=$(yunohost app setting "__APP__" method)
KEEP=$(yunohost app setting "__APP__" keep)

# Verbose flag 1 = true, 0 = false
VERBOSE=$(yunohost app setting "__APP__" debug)

#=========================================================#
#                    SCRIPT FUNCTIONS                     #
#=========================================================#

fail() {
    yunohost app setting "__APP__" state -v "failed"
    exit 1
}

do_need_mount() {
    true
}

do_mount() {
    true
}

do_backup() {

    echo "---------- BEGIN BACKUP ${BACKUP_NAME} ${METHOD} -----------"

    yunohost app setting "__APP__" last_run -v "$(date "+%Y-%m-%d %H:%M:%S")"
    yunohost app setting "__APP__" state -v "ongoing"
    # Check size in tmp dir
    local available_space_in_temp
    available_space_in_temp=$(findmnt --target "$YARCH_TMPDIR" --output AVAIL --bytes --noheadings --first-only)
    if [[ $BACKUP_SIZE -gt $available_space_in_temp ]]; then
        echo "ERROR : Not enough space to create temp archive (space neeeded = $(hrb "${BACKUP_SIZE}") available space in temp ($YARCH_TMPDIR) = $(hrb "${available_space_in_temp}"))" >&2
        fail
    fi

    local verbose_option=""
    if [[ $VERBOSE == "1" ]]; then
        verbose_option="--verbose"
    fi

    case "$METHOD" in
    local)
        $YUNO_ARCHIVE backup local \
            --log="$LOG" \
            --repository="$LOCAL_REPOSITORY" \
            --name="$BACKUP_NAME" \
            --source="$BACKUP_TMP_DIR" \
            --compress="gzip" \
            --info="${INFO_FILE}" \
            --keep="$KEEP" \
            --hook="${HOOK_FILE}" \
            "${verbose_option}" ||
            fail
        ;;
    # We won't fail with send_to_drive method because this methode could be called directly in command line
    drive | send_to_drive)
        $YUNO_ARCHIVE backup drive \
            --log="$LOG" \
            --drive="$DRIVE_REPOSITORY" \
            --repository="ynh_archives" \
            --name="$BACKUP_NAME" \
            --source="$BACKUP_TMP_DIR" \
            --compress="gzip" \
            --info="${INFO_FILE}" \
            --keep="$KEEP" \
            --hook="${HOOK_FILE}" \
            "${verbose_option}" ||
            fail
        ;;
    # We won't fail with send_to_drive method because this methode could be called directly in command line
    rclone | send_to_rclone)
        $YUNO_ARCHIVE backup rclone \
            --log="$LOG" \
            --repository="$RCLONE_REPOSITORY" \
            --path="ynh_archives" \
            --name="$BACKUP_NAME" \
            --source="$BACKUP_TMP_DIR" \
            --compress="gzip" \
            --info="${INFO_FILE}" \
            --keep="$KEEP" \
            --hook="${HOOK_FILE}" \
            "${verbose_option}" ||
            fail
        ;;
    *)
        echo "Unknown method '$METHOD'" >&2
        fail
        ;;
    esac

    # To make backup visible on yunohost Backup local menu, we modify name file and add a symbolic link with only tar name
    if [[ $IS_DEFAULT_REPO == "1" ]]; then
        mv "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gzip" "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gz"
        ln -sfn "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gz" "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar"
    fi

    yunohost app setting "__APP__" state -v "successful"
    return 0
}

#=========================================================#
#                           MAIN                          #
#=========================================================#

case "$1" in
need_mount)
    do_need_mount
    ;;
mount)
    do_mount
    ;;
backup)
    do_backup
    ;;
*)
    echo "hook __APP__ called with unknown argument \`$1'" >&2
    exit 1
    ;;
esac

exit 0
