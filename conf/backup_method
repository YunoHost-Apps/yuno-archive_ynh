#!/usr/bin/env bash
# Fail on error
set -Eeuo pipefail

#=========================================================#
#                     GLOBAL VARS                         #
#=========================================================#

# yuno-archive script
declare -r YUNO_ARCHIVE='__INSTALL_DIR__/yuno-archive.sh'

# log file
declare -r LOG='/var/log/__APP__/backup.log'

# Params sent by yunohost backup script
declare -r BACKUP_TMP_DIR="$2"
declare -r BACKUP_NAME="$3"
declare -r LOCAL_REPO="$4"
declare -r BACKUP_SIZE="$5"
declare -r BACKUP_DESCRIPTION="$6"

# Export tmp dir root to use yunohost.backup (/tmp is often too small to create archive file)
export YARCH_TMPDIR="/home/yunohost.backup/yuno-archive_tmp"
mkdir -p "$YARCH_TMPDIR"

# Info file name
declare -r INFO_FILE="${BACKUP_TMP_DIR}/info.json"

# App config
IS_DEFAULT_REPO=$(yunohost app setting "__APP__" ynh_repo)

LOCAL_REPOSITORY="/home/yunohost.backup/archives"
if [[ $IS_DEFAULT_REPO == "0" ]]; then
    LOCAL_REPOSITORY=$(yunohost app setting "__APP__" local_repository)
fi
DRIVE_REPOSITORY=$(yunohost app setting "__APP__" drive_repository)
RCLONE_REPOSITORY=$(yunohost app setting "__APP__" rclone_repository)

METHOD=$(yunohost app setting "__APP__" method)
KEEP=$(yunohost app setting "__APP__" keep)

#=========================================================#
#                    SCRIPT FUNCTIONS                     #
#=========================================================#

fail() {
    yunohost app setting "__APP__" state -v "failed"
    exit 1
}

do_need_mount() {
    true
}

do_mount() {
    true
}

do_backup() {

    echo "---------- BEGIN BACKUP ${BACKUP_NAME} ${METHOD} -----------"

    yunohost app setting "__APP__" last_run -v "$(date "+%Y-%m-%d %H:%M:%S")"
    yunohost app setting "__APP__" state -v "ongoing"
    # Check size in tmp dir
    local available_space_in_temp
    available_space_in_temp=$(findmnt --target "$YARCH_TMPDIR" --output AVAIL --bytes --noheadings --first-only)
    if [[ $BACKUP_SIZE -gt $available_space_in_temp ]]; then
        echo "ERROR : Not enough space to create temp archive (space neeeded = $(hrb "${BACKUP_SIZE}") available space in temp = $(hrb "${available_space_in_temp}"))" >&2
        fail
    fi

    case "$METHOD" in
        local)
            $YUNO_ARCHIVE backup local --log="$LOG" --repository="$LOCAL_REPOSITORY" --name="$BACKUP_NAME" --source="$BACKUP_TMP_DIR" --compress="gzip" --info="${INFO_FILE}" --keep="$KEEP" || fail
            ;;
        drive)
            $YUNO_ARCHIVE backup drive --log="$LOG" --drive="$DRIVE_REPOSITORY" --repository="ynh_archives" --name="$BACKUP_NAME" --source="$BACKUP_TMP_DIR" --compress="gzip" --info="${INFO_FILE}" --keep="$KEEP"  || fail
            ;;
        rclone)
            $YUNO_ARCHIVE backup rclone --log="$LOG" --repository="$RCLONE_REPOSITORY" --path="ynh_archives" --name="$BACKUP_NAME" --source="$BACKUP_TMP_DIR" --compress="gzip" --info="${INFO_FILE}" --keep="$KEEP"  || fail
            ;;
        *)
            echo "Unknown method '$METHOD'" >&2
            fail
            ;;
    esac

    # To make backup visible on yunohost Backup local menu, we modify name file and add a symbolic link with only tar name
    if [[ $IS_DEFAULT_REPO == "1" ]]; then
        mv "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gzip" "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gz"
        ln -sfn "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar.gz" "${LOCAL_REPOSITORY}/${BACKUP_NAME}.tar"
    fi
    
    yunohost app setting "__APP__" state -v "successful"
    return 0
}

#=========================================================#
#                           MAIN                          #
#=========================================================#

case "$1" in
    need_mount)
        do_need_mount
        ;;
    mount)
        do_mount
        ;;
    backup)
        do_backup
        ;;
    *)
        echo "hook __APP__ called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
